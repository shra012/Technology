#################################################
# Custom k3s in vagrant playbook.
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml
  
  tasks:
  - name: Install aptitude using apt
    apt: 
      name: aptitude 
      state: present
      update_cache: yes 
      force_apt_get: yes
  - name: Install required system packages
    apt: 
      name: "{{ item }}"
      state: present
      update_cache: yes
    loop: 
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
  - name: Download k3s installer
    get_url: 
      url: https://get.k3s.io 
      mode: 700
      dest: /tmp/k3s.sh
  - name: Install k3s on the machine
    shell: /tmp/k3s.sh
  - name: Remove k3s installer
    file:
      path: /tmp/k3s.sh
      state: absent
  - name: Create the .kube directory under vagrant user home
    file:
      path: /home/vagrant/.kube
      state: directory
      owner: vagrant
      group: vagrant
      mode: '0755'
  - name: Copy k3s.yaml file to user .kube folder
    copy:
      remote_src: yes
      src: /etc/rancher/k3s/k3s.yaml
      dest: /home/vagrant/.kube/config
      owner: vagrant
      group: vagrant
      mode: '0644'
  - name: Check if the KUBECONFIG exists in .profile
    shell: grep -c "KUBECONFIG" /home/vagrant/.profile || true
    register: kube_config_exists
  - name: Add to KUBECONFIG export
    lineinfile:
      path: /home/vagrant/.profile
      line: |-
            
            # Export statements added by ansible
            export KUBECONFIG=/home/vagrant/.kube/config
    when: kube_config_exists.stdout == "0"
  - name: Get kube dashboard version
    shell: "curl -w '%{url_effective}' -I -L -s -S ${GITHUB_URL}/latest -o /dev/null | sed -e 's|.*/||'"
    register: kube_dashboard_version
    args:
      warn: false # set warn=false to prevent warning
    environment:
      GITHUB_URL: https://github.com/kubernetes/dashboard/releases
  - name: debug kube dashboard version
    debug: msg="{{ kube_dashboard_version.stdout }}"
  - name: set fact to use kube dashboard version
    set_fact:
      kube_dashboard_version: "{{ kube_dashboard_version.stdout }}"
  - name: use create kubernetes dashboard
    shell: k3s kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/${VERSION_KUBE_DASHBOARD}/aio/deploy/recommended.yaml
    environment:
      VERSION_KUBE_DASHBOARD: "{{ kube_dashboard_version }}"
  - name: create admin user config
    copy:
      dest: "/home/vagrant/dashboard.admin-user.yml"
      content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: admin-user
          namespace: kubernetes-dashboard
  - name: create admin user role config
    copy:
      dest: "/home/vagrant/dashboard.admin-user-role.yml"
      content: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: admin-user
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: admin-user
          namespace: kubernetes-dashboard
  - name: use create kubernetes dashboard
    shell: k3s kubectl create -f /home/vagrant/dashboard.admin-user.yml -f /home/vagrant/dashboard.admin-user-role.yml
  - name: Get admin bearer token
    shell: k3s kubectl -n kubernetes-dashboard describe secret admin-user-token | grep '^token'
    register: kube_dashboard_admin_user_bearer_token
  - name: admin dashboard access
    debug: > 
      msg="Export KUBECONFIG=./.kube/config and run 'kubectl proxy' in host.
      Admin dashboard can be access via http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
      with user 'admin-user' and password '{{ kube_dashboard_admin_user_bearer_token.stdout }}'"